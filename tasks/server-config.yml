---

##-------------------
##  v0.11.x and above
##-------------------

- name: Create kong config file | v0.12.x or earlier
  template:
    src:  "0.11.x-kong.conf.j2"
    dest: "{{ kong_conf_dir }}/kong.conf"
    owner: root
    group: root
    mode:  0644
  notify:
    - Validate kong config
    - Restart kong
  when: kong_version is version_compare('0.13.0', '<')

- name: Create kong config file | since v0.13.x to v2.6.x
  template:
    src:  "0.13.x-kong.conf.j2"
    dest: "{{ kong_conf_dir }}/kong.conf"
    owner: root
    group: root
    mode:  0644
  when: kong_version is version_compare('0.13.0', '>=') and kong_version is version_compare('2.7.0', '<')
  notify:
    - Validate kong config
    - Restart kong

- name: Create kong config file | since v2.7.0
  template:
    src:  "kong.conf.j2"
    dest: "{{ kong_conf_dir }}/kong.conf"
    owner: root
    group: root
    mode:  0644
  when: kong_version is version_compare('2.7.0', '>=')
  notify:
    - Validate kong config
    - Restart kong

# "Reload kong" handler sometimes fails for instance when access_log config
# This is an edge case when custom log format is configured and name of log format
# appended to proxy_access_log property value ("logs/access.log"). Unfortunately,
# "kong reload" command does not recompile nginx-kong.conf as expected before
# reloading nginx. So the outdated nginx-kong.conf fails nginx config validation
# and nginx errors out.
# So it is safer to Restart
- name: Create kong custom nginx config file
  template:
    src:  custom-nginx.template.j2
    dest: "{{ kong_conf_dir }}/custom-nginx.template"
    owner: root
    group: root
    mode:  0644
  notify:
    - Validate kong config
    - Restart kong

- name: Prepare kong prefix directory
  shell: >
      kong prepare --prefix {{ kong_prefix_dir }} --conf {{ kong_conf_dir }}/kong.conf
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  args:
    creates: "{{ kong_prefix_dir }}"

- name: Initialise kong run status
  set_fact:
    run_status: up

- name: Check kong health status
  shell: kong health || true
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  changed_when: false
  register: health

- name: Set kong run status
  set_fact:
    run_status: down
  when: health.stderr.find('Kong is not running') != -1

- debug: var=health
- debug: var=run_status

- name: Update kong database schema
  shell: >
      kong migrations up --conf {{ kong_conf_dir }}/kong.conf
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  when: run_status == "down"
  run_once: true
  register: migration

- name: Copy over kong systemd service unit
  template:
    src: kong.service.j2
    dest: "{{ kong_systemd_units_dir }}/kong.service"
    owner: root
    group: root
    mode:  0644
  notify:
    - Reload systemd
    - Restart kong

- name: Start kong
  service:
    name: kong
    enabled: yes
    state: started

- include_tasks: postgres_helper_script.yml
  when: kong_database == "postgres"
